generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts              Account[]
  sessions              Session[]
  goals                 Goal[]
  lessons               Lesson[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GenerationStatus {
  GENERATING
  COMPLETED
  FAILED
}

model Goal {
  id               String           @id @default(cuid())
  name             String
  generationStatus GenerationStatus @default(GENERATING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  concepts Concept[]
  lessons  Lesson[]
}

enum Mastery {
  UNKNOWN
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Concept {
  id            String  @id @default(cuid())
  name          String
  description   String
  masteryLevel  Mastery @default(UNKNOWN)
  teacherReport String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id])

  lessons               Lesson[]
}


enum LessonStatus {
  TODO
  ACTIVE
  PAUSED
  DONE_WITH_HELP
  DONE
}


enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}



model Lesson {
  id         String       @id @default(cuid())
  lessonGoal String
  turns      Json
  status     LessonStatus @default(ACTIVE)
  difficulty Difficulty   @default(BEGINNER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conceptId String
  concept   Concept @relation(fields: [conceptId], references: [id])

  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  problemId String
  problem   Problem @relation(fields: [problemId], references: [id])

  @@index([conceptId])
  @@index([goalId])
  @@index([userId])
  @@index([problemId])
}

enum ProblemUploadStatus {
  PENDING
  SUCCESS
  ERROR
  CANCELLED
}

model ProblemUpload {
  id        String              @id @default(cuid())
  fileName  String
  nRecords  Int
  fileSize  Int
  status    ProblemUploadStatus @default(PENDING)
  error     String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  problems Problem[]
}

model Problem {
  id         String                       @id @default(cuid())
  dataSource String
  problem    String
  solution   String
  level      String
  type       String
  vector     Unsupported("vector(3072)")?
  createdAt  DateTime                     @default(now())

  problemUploadId String
  problemUpload   ProblemUpload @relation(fields: [problemUploadId], references: [id], onDelete: Cascade)
  Lesson          Lesson[]
}
