generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgvector(map: "vector")]
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

model Subscription {
  id                   String             @id @default(cuid())
  status               SubscriptionStatus @default(INACTIVE)
  cancelAt             DateTime?
  stripeSubscriptionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppUsage {
  id          String   @id @default(cuid())
  fingerprint String   @unique // IP address or userId if logged in
  creditsUsed Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([fingerprint])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts           Account[]
  sessions           Session[]
  subscription       Subscription?
  studentContext     StudentContext?
  studentConcepts    StudentConcept[]
  studentSolutions   StudentSolution[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



enum Language {
  de
  en
}

model StudentContext {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  grade     String
  country   String
  textbook  String
  nextTestDate DateTime?
}

model Concept {
  id        String   @id @default(cuid())
  name      String
  description String
  // Self-relation
  parentConceptId String?
  parentConcept   Concept?   @relation("ConceptHierarchy", fields: [parentConceptId], references: [id], onDelete: Cascade)
  subConcepts     Concept[]  @relation("ConceptHierarchy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentConcepts StudentConcept[]
  problems Problem[]
}



model StudentConcept {
  id        String   @id @default(cuid())
  conceptId String
  concept   Concept  @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  skillLevel String   @default("unknown")
  teacherReport String?

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Problem {
  id                String                       @id @default(cuid())
  problem           String
  problemNumber     String
  referenceSolution String?
  vector            Unsupported("vector(3072)")?
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt

  conceptId String?
  concept   Concept? @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  studentSolutions   StudentSolution[]
}

model StudentSolution {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  status               StudentSolutionStatus @default(INITIAL)
  completedAt          DateTime?
  canvas               Json                  @default("{\"paths\": []}")
  evaluation           Json                  @default("null")
  messages             Message[]
  recommendedQuestions Json                  @default("[]")


  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([problemId, userId])
}

enum MessageRole {
  user
  assistant
}

model Message {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  role              MessageRole
  content           String
  studentSolutionId String
  studentSolution   StudentSolution @relation(fields: [studentSolutionId], references: [id], onDelete: Cascade)
}

enum StudentSolutionStatus {
  INITIAL
  IN_PROGRESS
  SOLVED
}
