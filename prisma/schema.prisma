generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgvector(map: "vector")]
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

model Subscription {
  id                   String             @id @default(cuid())
  status               SubscriptionStatus @default(INACTIVE)
  cancelAt             DateTime?
  stripeSubscriptionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     Account[]
  sessions     Session[]
  assignments  Assignment[]
  userProblems UserProblem[]
  subscription Subscription?
  groups       Group[]       @relation("UserGroups")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProblemUploadStatus {
  PENDING
  SUCCESS
  ERROR
  CANCELLED
}

model ProblemUpload {
  id        String              @id @default(cuid())
  fileName  String
  nRecords  Int
  fileSize  Int
  status    ProblemUploadStatus @default(PENDING)
  error     String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  problems Problem[]
}

enum Language {
  de
  en
}

model Problem {
  id         String                       @id @default(cuid())
  dataSource String
  problem    String
  solution   String
  level      String
  language   Language                     @default(en)
  type       String
  vector     Unsupported("vector(3072)")?
  createdAt  DateTime                     @default(now())

  problemUploadId String
  problemUpload   ProblemUpload @relation(fields: [problemUploadId], references: [id], onDelete: Cascade)
}

model Assignment {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  problems UserProblem[]
}

enum UserProblemStatus {
  NEW
  INITIAL
  IN_PROGRESS
  SOLVED
  FAILED
}

model UserProblem {
  id                   String            @id @default(cuid())
  problem              String
  problemNumber        String
  referenceSolution    String?
  status               UserProblemStatus @default(INITIAL)
  canvas               Json
  evaluation           Json?
  relevantImageSegment Json?
  imageUrl             String?
  updatedAt            DateTime          @updatedAt
  createdAt            DateTime          @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AppUsage {
  id          String   @id @default(cuid())
  fingerprint String   @unique // IP address or other fingerprinting method
  creditsUsed Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([fingerprint])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[] @relation("UserGroups")
}
