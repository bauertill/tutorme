generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts              Account[]
  sessions              Session[]
  goals                 Goal[]
  userQuestionResponses UserQuestionResponse[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Goal {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  concepts Concept[]
}

enum Mastery {
  UNKNOWN
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Concept {
  id           String  @id @default(cuid())
  name         String
  description  String
  masteryLevel Mastery @default(UNKNOWN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id])

  quizzes               Quiz[]
  userQuestionResponses UserQuestionResponse[]
}

model Quiz {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conceptId String
  concept   Concept @relation(fields: [conceptId], references: [id])

  questions             Question[]
  userQuestionResponses UserQuestionResponse[]
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Question {
  id            String     @id @default(cuid())
  question      String
  options       String[]
  correctAnswer String
  difficulty    Difficulty
  explanation   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id])

  userResponses UserQuestionResponse[]
}

model UserQuestionResponse {
  id        String  @id @default(cuid())
  answer    String
  isCorrect Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  quizId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  conceptId  String
  concept    Concept  @relation(fields: [conceptId], references: [id])

  @@index([userId])
  @@index([questionId])
  @@index([quizId])
  @@index([conceptId])
}
