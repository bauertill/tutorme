generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgvector(map: "vector")]
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

model Subscription {
  id                   String             @id @default(cuid())
  status               SubscriptionStatus @default(INACTIVE)
  cancelAt             DateTime?
  stripeSubscriptionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppUsage {
  id          String   @id @default(cuid())
  fingerprint String   @unique // IP address or userId if logged in
  creditsUsed Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([fingerprint])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts           Account[]
  sessions           Session[]
  subscription       Subscription?
  student            Student?
  groupAssignments   GroupAssignment[]
  studentAssignments StudentAssignment[]
  Problem            Problem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProblemUploadStatus {
  PENDING
  SUCCESS
  ERROR
  CANCELLED
}

model ProblemUpload {
  id        String              @id @default(cuid())
  fileName  String
  nRecords  Int
  fileSize  Int
  status    ProblemUploadStatus @default(PENDING)
  error     String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  problems Problem[]
}

enum Language {
  de
  en
}

model Student {
  id                 String              @id @default(cuid())
  userId             String              @unique
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentGroup       StudentGroup[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  studentAssignments StudentAssignment[]
}

model StudentGroup {
  id               String            @id @default(cuid())
  name             String
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  students         Student[]
  groupAssignments GroupAssignment[]
}

model GroupAssignment {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  studentGroupId String
  studentGroup   StudentGroup @relation(fields: [studentGroupId], references: [id], onDelete: Cascade)

  problems           Problem[]
  studentAssignments StudentAssignment[]
}

model StudentAssignment {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  groupAssignmentId String?
  groupAssignment   GroupAssignment? @relation(fields: [groupAssignmentId], references: [id], onDelete: SetNull)

  problems         Problem[]
  studentSolutions StudentSolution[]
}

model Book {
  id          String        @id @default(cuid())
  name        String
  publisher   String
  isbn        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  BookChapter BookChapter[]
}

model BookChapter {
  id           String         @id @default(cuid())
  name         String
  bookId       String
  book         Book           @relation(fields: [bookId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  BookExercise BookExercise[]
}

model BookExercise {
  id            String      @id @default(cuid())
  name          String
  bookChapterId String
  bookChapter   BookChapter @relation(fields: [bookChapterId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Problem       Problem[]
}

model Problem {
  id                String                       @id @default(cuid())
  problem           String
  problemNumber     String
  referenceSolution String?
  vector            Unsupported("vector(3072)")?
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookExerciseId  String?
  bookExercise    BookExercise?  @relation(fields: [bookExerciseId], references: [id], onDelete: Cascade)
  ProblemUpload   ProblemUpload? @relation(fields: [problemUploadId], references: [id])
  problemUploadId String?

  groupAssignments    GroupAssignment[]
  studentAssignment   StudentAssignment? @relation(fields: [studentAssignmentId], references: [id])
  studentAssignmentId String?
  studentSolutions    StudentSolution[]
}

model StudentSolution {
  id         String                @id @default(cuid())
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  status     StudentSolutionStatus @default(INITIAL)
  canvas     Json
  evaluation Json?

  studentAssignmentId String
  studentAssignment   StudentAssignment @relation(fields: [studentAssignmentId], references: [id], onDelete: Cascade)

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String
}

enum StudentSolutionStatus {
  INITIAL
  IN_PROGRESS
  SOLVED
}
