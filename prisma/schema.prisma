generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  goals                 Goal[]
  lessons               Lesson[]
  sessions              Session[]
  userQuestionResponses UserQuestionResponse[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Goal {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  concepts  Concept[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Concept {
  id                    String                 @id @default(cuid())
  name                  String
  description           String
  masteryLevel          Mastery                @default(UNKNOWN)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  goalId                String
  teacherReport         String?
  goal                  Goal                   @relation(fields: [goalId], references: [id])
  lessons               Lesson[]
  quizzes               Quiz[]
  userQuestionResponses UserQuestionResponse[]
}

model Quiz {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  conceptId             String
  status                QuizStatus             @default(ACTIVE)
  questions             Question[]
  concept               Concept                @relation(fields: [conceptId], references: [id])
  userQuestionResponses UserQuestionResponse[]
}

model Question {
  id            String                 @id @default(cuid())
  question      String
  options       String[]
  correctAnswer String
  difficulty    Difficulty
  explanation   String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  quizId        String
  quiz          Quiz                   @relation(fields: [quizId], references: [id])
  userResponses UserQuestionResponse[]
}

model UserQuestionResponse {
  id         String   @id @default(cuid())
  answer     String
  isCorrect  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  questionId String
  quizId     String
  conceptId  String
  concept    Concept  @relation(fields: [conceptId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([questionId])
  @@index([quizId])
  @@index([conceptId])
}

model Lesson {
  id               String       @id @default(cuid())
  lessonGoal       String
  lessonIterations Json
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  conceptId        String
  goalId           String
  userId           String
  status           LessonStatus @default(ACTIVE)
  concept          Concept      @relation(fields: [conceptId], references: [id])
  goal             Goal         @relation(fields: [goalId], references: [id])
  user             User         @relation(fields: [userId], references: [id])

  @@index([conceptId])
  @@index([goalId])
  @@index([userId])
}

model ProblemUpload {
  id        String              @id @default(cuid())
  fileName  String
  nRecords  Int
  fileSize  Int
  status    ProblemUploadStatus @default(PENDING)
  error     String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  problems  Problem[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Problem {
  id              String                 @id @default(cuid())
  problem         String
  solution        String
  level           String
  type            String
  vector          Unsupported("vector")?
  createdAt       DateTime               @default(now())
  dataSource      String
  problemUploadId String
  problemUpload   ProblemUpload          @relation(fields: [problemUploadId], references: [id], onDelete: Cascade)
}

enum Mastery {
  UNKNOWN
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum QuizStatus {
  ACTIVE
  DONE
}

enum LessonStatus {
  ACTIVE
  DONE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProblemUploadStatus {
  PENDING
  SUCCESS
  ERROR
  CANCELLED
}
